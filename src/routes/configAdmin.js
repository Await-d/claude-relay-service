/**
 * @fileoverview Âä®ÊÄÅÈÖçÁΩÆÁÆ°ÁêÜË∑ØÁî±
 *
 * Êèê‰æõÁÆ°ÁêÜÂëòÁïåÈù¢Áî®‰∫éÁÆ°ÁêÜÂä®ÊÄÅÈÖçÁΩÆÁöÑAPIÁ´ØÁÇπ
 * ÊîØÊåÅÈÖçÁΩÆÈ°πÁöÑËØªÂèñ„ÄÅÊõ¥Êñ∞ÂíåÁä∂ÊÄÅÊü•ËØ¢
 *
 * @author Claude Code
 * @version 1.0.0
 */

const express = require('express')
const router = express.Router()
const { authenticateAdmin } = require('../middleware/auth')
const { dynamicConfigManager } = require('../services/dynamicConfigService')
const logger = require('../utils/logger')

/**
 * Ëé∑ÂèñËØ∑Ê±ÇÊó•ÂøóÈÖçÁΩÆ
 * GET /admin/config/request-logging
 */
router.get('/request-logging', authenticateAdmin, async (req, res) => {
  try {
    const config = await dynamicConfigManager.getRequestLoggingConfig()

    res.json({
      success: true,
      data: config,
      timestamp: new Date().toISOString()
    })

    logger.info(`üìä Admin ${req.admin.username} retrieved request logging config`)
  } catch (error) {
    logger.error('‚ùå Failed to get request logging config:', error)

    res.status(500).json({
      success: false,
      error: 'Failed to get request logging config',
      message: error.message
    })
  }
})

/**
 * Êõ¥Êñ∞ËØ∑Ê±ÇÊó•ÂøóÈÖçÁΩÆ
 * PUT /admin/config/request-logging
 */
router.put('/request-logging', authenticateAdmin, async (req, res) => {
  try {
    const { enabled, mode, sampling } = req.body

    // È™åËØÅËØ∑Ê±Ç‰Ωì
    if (typeof enabled !== 'undefined' && typeof enabled !== 'boolean') {
      return res.status(400).json({
        success: false,
        error: 'Invalid parameter',
        message: 'enabled must be a boolean'
      })
    }

    const results = {}

    // Êõ¥Êñ∞enabledÈÖçÁΩÆ
    if (typeof enabled !== 'undefined') {
      const success = await dynamicConfigManager.setConfig('requestLogging.enabled', enabled)
      results.enabled = { value: enabled, success }
    }

    // Êõ¥Êñ∞modeÈÖçÁΩÆ
    if (mode) {
      const success = await dynamicConfigManager.setConfig('requestLogging.mode', mode)
      results.mode = { value: mode, success }
    }

    // Êõ¥Êñ∞ÈááÊ†∑ÁéáÈÖçÁΩÆ
    if (sampling?.rate !== undefined) {
      const success = await dynamicConfigManager.setConfig(
        'requestLogging.sampling.rate',
        sampling.rate
      )
      results.samplingRate = { value: sampling.rate, success }
    }

    logger.info(`üìä Admin ${req.admin.username} updated request logging config:`, results)

    res.json({
      success: true,
      data: results,
      message: 'Request logging configuration updated successfully',
      timestamp: new Date().toISOString()
    })
  } catch (error) {
    logger.error('‚ùå Failed to update request logging config:', error)

    res.status(500).json({
      success: false,
      error: 'Failed to update request logging config',
      message: error.message
    })
  }
})

/**
 * Ëé∑ÂèñÂä®ÊÄÅÈÖçÁΩÆÁÆ°ÁêÜÂô®Áä∂ÊÄÅ
 * GET /admin/config/status
 */
router.get('/status', authenticateAdmin, async (req, res) => {
  try {
    const status = dynamicConfigManager.getStatus()

    res.json({
      success: true,
      data: status,
      timestamp: new Date().toISOString()
    })

    logger.debug(`üìä Admin ${req.admin.username} retrieved config manager status`)
  } catch (error) {
    logger.error('‚ùå Failed to get config manager status:', error)

    res.status(500).json({
      success: false,
      error: 'Failed to get config manager status',
      message: error.message
    })
  }
})

/**
 * Ê∏ÖÁêÜÈÖçÁΩÆÁºìÂ≠ò
 * POST /admin/config/cache/clear
 */
router.post('/cache/clear', authenticateAdmin, async (req, res) => {
  try {
    dynamicConfigManager.cleanupCache()

    logger.info(`üßπ Admin ${req.admin.username} cleared config cache`)

    res.json({
      success: true,
      message: 'Configuration cache cleared successfully',
      timestamp: new Date().toISOString()
    })
  } catch (error) {
    logger.error('‚ùå Failed to clear config cache:', error)

    res.status(500).json({
      success: false,
      error: 'Failed to clear config cache',
      message: error.message
    })
  }
})

module.exports = router
